surface_columns <- select(lrn14, one_of(surface_questions))
lrn14$surf <- rowMeans(surface_columns)
# select the columns related to strategic learning and create column 'stra' by averaging
strategic_columns <- select(lrn14, one_of(strategic_questions))
lrn14$stra <- rowMeans(strategic_columns)
keep_columns <- c("gender","Age","attitude", "deep", "stra", "surf", "Points")
# select the 'keep_columns' to create a new dataset
learning2014 <- select(lrn14, one_of(keep_columns))
# see the stucture of the new dataset
str(learning2014)
summary(learning2014)
learning2014 <- filter(learning2014, points = 0)
# Exclude observations where the exam points variable is zero
learning2014 <- filter(learning2014, points == 0)
learning2014 <- filter(learning2014, Points == 0)
summary(learning2014)
dim(learning2014)
str(learning2014)
learning2014 <- filter(learning2014, Points > 0)
str(learning2014)
learning2014 <- filter(learning2014, Points < 0)
str(learning2014)
# Gabrielle Mantell - 06 November 2018
# IODS 2018 R Studio Exercise 2
# Read the full learning2014 data
lrn14 <- read.table("http://www.helsinki.fi/~kvehkala/JYTmooc/JYTOPKYS3-data.txt", sep="\t", header=TRUE)
# Explore the structure and dimensions of the data
dim(lrn14) # this dataset consists of 183 rows and 60 columns
str(lrn14) # and 183 obs. of  60 variables
# Access the dplyr library
library(dplyr)
# Create an analysis dataset with the variables gender, age, attitude, deep, stra, surf and points
# by combining questions in the learning2014 data
# Combine questions related to deep, surface and strategic learning
deep_questions <- c("D03", "D11", "D19", "D27", "D07", "D14", "D22", "D30","D06",  "D15", "D23", "D31")
surface_questions <- c("SU02","SU10","SU18","SU26", "SU05","SU13","SU21","SU29","SU08","SU16","SU24","SU32")
strategic_questions <- c("ST01","ST09","ST17","ST25","ST04","ST12","ST20","ST28")
# select the columns related to deep learning and create column 'deep' by averaging
deep_columns <- select(lrn14, one_of(deep_questions))
lrn14$deep <- rowMeans(deep_columns)
# select the columns related to surface learning and create column 'surf' by averaging
surface_columns <- select(lrn14, one_of(surface_questions))
lrn14$surf <- rowMeans(surface_columns)
# select the columns related to strategic learning and create column 'stra' by averaging
strategic_columns <- select(lrn14, one_of(strategic_questions))
lrn14$stra <- rowMeans(strategic_columns)
# choose columns to keep
keep_columns <- c("gender","Age","attitude", "deep", "stra", "surf", "Points")
# select the 'keep_columns' to create a new dataset
learning2014 <- select(lrn14, one_of(keep_columns))
# Exclude observations where the exam points variable is zero
learning2014 <- filter(learning2014, Points < 0)
str(learning2014)
# Read the full learning2014 data
lrn14 <- read.table("http://www.helsinki.fi/~kvehkala/JYTmooc/JYTOPKYS3-data.txt", sep="\t", header=TRUE)
# Explore the structure and dimensions of the data
dim(lrn14) # this dataset consists of 183 rows and 60 columns
str(lrn14) # and 183 obs. of  60 variables
# Create an analysis dataset with the variables gender, age, attitude, deep, stra, surf and points
# by combining questions in the learning2014 data
library(dplyr)
# Combine questions related to deep, surface and strategic learning
deep_questions <- c("D03", "D11", "D19", "D27", "D07", "D14", "D22", "D30","D06",  "D15", "D23", "D31")
surface_questions <- c("SU02","SU10","SU18","SU26", "SU05","SU13","SU21","SU29","SU08","SU16","SU24","SU32")
strategic_questions <- c("ST01","ST09","ST17","ST25","ST04","ST12","ST20","ST28")
# select the columns related to deep learning and create column 'deep' by averaging
deep_columns <- select(lrn14, one_of(deep_questions))
lrn14$deep <- rowMeans(deep_columns)
# select the columns related to surface learning and create column 'surf' by averaging
surface_columns <- select(lrn14, one_of(surface_questions))
lrn14$surf <- rowMeans(surface_columns)
# select the columns related to strategic learning and create column 'stra' by averaging
strategic_columns <- select(lrn14, one_of(strategic_questions))
lrn14$stra <- rowMeans(strategic_columns)
# choose columns to keep
keep_columns <- c("gender","Age","attitude", "deep_columns", "stra_columns", "surf_columns", "Points")
# select the 'keep_columns' to create a new dataset
learning2014 <- select(lrn14, one_of(keep_columns))
# Exclude observations where the exam points variable is zero
learning2014 <- filter(learning2014, Points == 0)
str(learning2014)
lrn14 <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/learning2014.txt", sep=",", header=TRUE)
lrn14 <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/learning2014.txt", sep=",", header=TRUE)
str(lrn14)
dim(lrn14)
lrn14 <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/learning2014.txt", sep=",", header=TRUE)
pairs(learning2014)
pairs(lrn14)
pairs(learning2014[-1])
pairs(lrn14[-1])
str(lrn14$gender)
summary(lrn14$gender)
head(lrn14)
?head
ggpairs(lrn14, lower = list(combo = wrap("facethist", bins = 20)))
library(GGally)
library(ggplot2)
install.packages("GGally")
install.packages("ggplot2")
library(GGally)
library(ggplot2)
library(ggplot2)
library(GGally)
ggpairs(lrn14, lower = list(combo = wrap("facethist", bins = 20)))
# create a regression model with multiple explanatory variables
model1 <- lm(points ~ attitude + stra + surf, data = lrn2014)
# print out a summary of the model
summary(model1)
model1 <- lm(points ~ attitude + stra + surf, data = lrn2014)
# Regression and model validation
# ALL CODE
# Load libraries
library(GGally)
library(ggplot2)
# Import data
lrn14 <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/learning2014.txt", sep=",", header=TRUE)
# About the data
str(lrn14)
dim(lrn14)
# draw a scatter plot matrix of the variables excluding the first column, gender
pairs(lrn14[-1])
# show summaries of the variables in the data.
summary(lrn14$gender)
summary(lrn14$age)
summary(lrn14$attitude)
summary(lrn14$deep)
summary(lrn14$stra)
summary(lrn14$surf)
summary(lrn14$points)
# create an plot matrix with ggpairs()
ggpairs(lrn14, lower = list(combo = wrap("facethist", bins = 20)))
# create a regression model with multiple explanatory variables
model1 <- lm(points ~ attitude + stra + surf, data = lrn2014)
# print out a summary of the model
summary(model1)
model1 <- lm(points ~ attitude + stra + surf, data = lrn14)
summary(model1)
# create a regression model with statistically relevant variables
model2 <- lm(points ~ attitude + stra, data = lrn14)
# print out a summary of the model
summary(model2)
# create a regression model with statistically relevant variables
model2 <- lm(points ~ attitude, data = lrn14)
# print out a summary of the model
summary(model2)
summary(lrn14$gender, lrn14$age, lrn14$attitude, lrn14$deep, lrn14$stra, lrn14$surf ,lrn14$points)
summary(lrn14)
summary(model2)
par(mfrow = c(2,2))
plot(model2, which = c(1:2,5))
**Residuals vs Fitted**
The Residuals vs Fitted plot is based on the assumption that the size of error doesn't depend on explanatory variables. The plot shows whether there is a problem with this assumption. There is no pattern in the data, therefore the model adheres to the assumption.
mat <- read.csv("student-mat.csv")
por <- read.csv("student-por.csv")
setwd("~/GitHub/IODS-project/data")
# import data
mat <- read.csv("student-mat.csv")
por <- read.csv("student-por.csv")
dim(mat)
str(mat)
dim(por)
str(por)
library(dplyr)
# common columns to use as identifiers
join_by <- c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet")
# join the two datasets by the selected identifiers
math_por <- inner_join(math, por, by = join_by, suffix = c(".math", ".por"))
# load libraries
library(dplyr)
# import data
mat <- read.csv("student-mat.csv")
por <- read.csv("student-por.csv")
# explore dimensions and structure of data
dim(mat)
str(mat)
dim(por)
str(por)
# common columns to use as identifiers
join_by <- c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet")
# join the two datasets by the selected identifiers
math_por <- inner_join(math, por, by = join_by, suffix = c(".math", ".por"))
# load libraries
library(dplyr)
# import data
math <- read.csv("student-mat.csv")
por <- read.csv("student-por.csv")
# explore dimensions and structure of data
dim(mat)
str(mat)
dim(por)
str(por)
# common columns to use as identifiers
join_by <- c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet")
# join the two datasets by the selected identifiers
math_por <- inner_join(math, por, by = join_by, suffix = c(".math", ".por"))
math <- read.table("student-mat.csv", sep=";", header=TRUE)
# import data
math <- read.table("student-mat.csv", sep=";", header=TRUE)
por <- read.table("student-por.csv", sep=";", header=TRUE)
dim(math)
str(math)
dim(por)
str(por)
join_by <- c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet")
math_por <- inner_join(math, por, by = join_by, suffix = c(".math", ".por"))
# print out the column names of 'math_por'
colnames(math_por)
# create a new data frame with only the joined columns
alc <- select(math_por, one_of(join_by))
# the columns in the datasets which were not used for joining the data
notjoined_columns <- colnames(math)[!colnames(math) %in% join_by]
# print out the columns not used for joining
print(notjoined_columns)
# for every column name not used for joining...
for(column_name in notjoined_columns) {
# select two columns from 'math_por' with the same original name
two_columns <- select(math_por, starts_with(column_name))
# select the first column vector of those two columns
first_column <- select(two_columns, 1)[[1]]
# if that first column vector is numeric...
if(is.numeric(first_column)) {
# take a rounded average of each row of the two columns and
# add the resulting vector to the alc data frame
alc[column_name] <- round(rowMeans(two_columns))
} else { # else if it's not numeric...
# add the first column vector to the alc data frame
alc[column_name] <- first_column
}
}
library(ggplot2)
View(math_por)
View(two_columns)
View(two_columns)
colnames(math_por)
dim(math_por)
str(math_por)
glimpse(alc)
# define a new column alc_use by combining weekday and weekend alcohol use
alc <- mutate(alc, alc_use = (Dalc + Walc) / 2)
# define a new logical column 'high_use'
alc <- mutate(alc, high_use = alc_use > 2)
head(alc)
head(alc)
glimpse(alc)
str(alc)
dim(alc)
write.csv(alc, file ="alc.csv")
read.csv("alc.csv")
str(alc)
head(alc)
str(math_por)
dim(math_por)
# Gabrielle Mantell - 17 November 2018
# IODS 2018 R Studio Exercise 3
# load libraries
library(dplyr); library(ggplot2)
# import data
math <- read.table("student-mat.csv", sep=";", header=TRUE)
por <- read.table("student-por.csv", sep=";", header=TRUE)
# explore dimensions and structure of data
dim(math)
str(math)
dim(por)
str(por)
# join the two data sets and only keep students present in both
join_by <- c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet")
math_por <- inner_join(math, por, by = join_by, suffix = c(".math", ".por"))
alc <- select(math_por, one_of(join_by))
notjoined_columns <- colnames(math)[!colnames(math) %in% join_by]
# explore structure and dimensions of joined data
str(math_por)
dim(math_por)
# combine duplicated answers in the joined data
for(column_name in notjoined_columns) {
two_columns <- select(math_por, starts_with(column_name))
first_column <- select(two_columns, 1)[[1]]
if(is.numeric(first_column)) {
alc[column_name] <- round(rowMeans(two_columns))
} else {
alc[column_name] <- first_column
}
}
# take the average of answers related to weekday and weekend alc consumption to create new column alc_use and high_use
alc <- mutate(alc, alc_use = (Dalc + Walc) / 2)
alc <- mutate(alc, high_use = alc_use > 2)
# inspect joined data
glimpse(alc)
str(alc)
dim(alc)
# save data
write.csv(alc, file ="alc.csv")
read.csv("alc.csv")
str(alc)
head(alc)
lrn14 <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/alc.txt ", sep=",", header=TRUE)
lrn14 <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/alc.txt ", sep=",", header=TRUE)
View(lrn14)
View(lrn14)
alc <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/alc.txt ", sep=",", header=TRUE)
View(alc)
summary(alc)
str(alc)
pairs(alc)
```{r}
install.packages("tidyr")
gather(alc) %>% glimpse
library(tidyr); library(dplyr); library(ggplot2)
gather(alc) %>% glimpse
gather(alc) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar()
View(alc)
g1 <- ggplot(alc, aes(x = high_use, y = G3, col = sex))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("grade")
# initialise a plot of high_use and absences
g2 <- ggplot(alc, aes(x = high_use, y = absences, col = sex))
# define the plot as a boxplot and draw it
g2 + geom_boxplot() + ylab("grade") + ggtitle("Student absences by alcohol consumption and sex")
alc %>% group_by(sex, high_use) %>% summarise()
alc %>% group_by(age, failures, Dalc, absences, high_use) %>% summarise()
g2 <- ggplot(alc, aes(x = high_use, y = absences, col = sex))
g2 + geom_boxplot() + ylab("grade") + ggtitle("Student absences by alcohol consumption and sex")
?table
table(alc,
exclude = if (useNA == "no") c(NA, NaN),
useNA = c("no", "ifany", "always"),
dnn = list.names(...), deparse.level = 1)
ggpairs(alc, lower = list(combo = wrap("facethist", bins = 20)))
library(GGally)
ggpairs(alc, lower = list(combo = wrap("facethist", bins = 20)))
gather(alc) %>% glimpse
```{r}
gather(alc$sex, alc$failures) %>% glimpse
summary(alc$sex)
summary(alc$sex, alc$gender)
summary(alc$sex, alc$absences)
summary(alc$failures)
summary(alc$sex)
summary(alc$failures)
summary(alc$Dalc)
summary(alc$absences)
summary(alc$failures)
summary(alc$Dalc)
table(sex, failures, Dalc, absences)
data(alc, package = "COUNT")
install.packages("COUNT")
data(alc, package = "COUNT")
table(sex, failures, Dalc, absences)
data(alc, package = "COUNT")
table(failures, Dalc, absences)
data(alc, package = "COUNT")
attach(alc)
table(sex, failures, Dalc, absences)
data(alc, package = "COUNT")
attach(alc)
table(high_use, failures)
table(high_use, sex)
table(high_use, Dalc)
table(high_use, absences)
data(alc, package = "COUNT")
attach(alc)
table(failures, high_use)
head(alc)
data(alc, package = "COUNT")
attach(alc)
table(alc_use, failures)
data(alc, package = "COUNT")
attach(alc)
table(alc_use, failures)
table(alc_use, sex)
table(alc_use, Dalc)
table(alc_use, absences)
table(high_use, failures)
table(high_use, failures)
table(high_use, sex)
table(high_use, Dalc)
table(high_use, absences)
g2 <- ggplot(alc, aes(x = high_use, y = sex, col = sex))
g2 + geom_boxplot() + ylab("grade") + ggtitle("Student absences by alcohol consumption and sex")
g2 <- ggplot(alc, aes(x = high_use, y = failures, col = sex))
g2 + geom_boxplot() + ylab("grade") + ggtitle("Student failures by alcohol consumption and sex")
g2 <- ggplot(alc, aes(x = high_use, y = Dalc, col = sex))
g2 + geom_boxplot() + ylab("grade") + ggtitle("Student work day alcohol consumption by alcohol consumption and sex")
g2 <- ggplot(alc, aes(x = high_use, y = absences, col = sex))
g2 + geom_boxplot() + ylab("grade") + ggtitle("Student absences by alcohol consumption and sex")
g2 <- ggplot(alc, aes(x = high_use, y = failures, col = sex))
g2 + geom_barplot() + ylab("grade") + ggtitle("Student failures by alcohol consumption and sex")
gather(alc) %>% ggplot(aes(x = high_use, y = failures, col = sex)) + facet_wrap("key", scales = "free") + geom_bar()
g2 <- ggplot(alc, aes(x = high_use, y = failures, col = sex))
g2 + geom_bar() + ylab("grade") + ggtitle("Student failures by alcohol consumption and sex")
g3 <- ggplot(alc, aes(x = high_use, y = failures, col = sex))
g3 + geom_bar() + ylab("grade") + ggtitle("Student failures by alcohol consumption and sex")
g3 <- ggplot(alc, aes(x = high_use, col = sex))
g3 + geom_bar() + ylab("grade") + ggtitle("Student failures by alcohol consumption and sex")
g2 <- ggplot(alc, aes(x = high_use, y = absences, col = sex))
g2 + geom_boxplot() + ylab("absences") + ggtitle("Student absences by alcohol consumption and sex")
g2 <- ggplot(alc, aes(x = high_use, y = failures, col = sex))
g2 + geom_boxplot() + ylab() + ggtitle("Student failures by alcohol consumption and sex")
g2 <- ggplot(alc, aes(x = high_use, y = failures, col = sex))
g2 + geom_boxplot() + ylab("failures") + ggtitle("Student failures by alcohol consumption and sex")
g2 <- ggplot(alc, aes(x = high_use, y = Dalc, col = sex))
g2 + geom_boxplot() + ylab("Dalc") + ggtitle("Student work day alcohol consumption by alcohol consumption and sex")
g2 <- ggplot(alc, aes(x = high_use, y = absences, col = sex))
g2 + geom_boxplot() + ylab("absences") + ggtitle("Student absences by alcohol consumption and sex")
g2 <- ggplot(alc, aes(x = high_use, y = Dalc, col = sex))
g2 + geom_boxplot() + ylab("Dalc") + ggtitle("Student work day alcohol consumption by alcohol consumption and sex")
g2 <- ggplot(alc, aes(x = high_use, y = absences, col = sex))
g2 + geom_boxplot() + ylab("absences") + ggtitle("Student absences by alcohol consumption and sex")
g2 <- ggplot(alc, aes(x = high_use, y = failures, col = sex))
g2 + geom_boxplot() + ylab("failures") + ggtitle("Student failures by alcohol consumption and sex")
g3 <- ggplot(alc, aes(x = high_use))
g3 + geom_bar() + ylab("failures") + ggtitle("Student failures by alcohol consumption and sex")
g3 <- ggplot(alc, aes(x = high_use, col = sex))
g3 + geom_bar() + ylab("failures") + ggtitle("Student failures by alcohol consumption and sex")
gather(alc) %>% ggplot(aes(x = high_use, y = failures, col = sex)) + facet_wrap("key", scales = "free") + geom_bar()
g2 <- ggplot(alc, aes(x = high_use, y = failures, col = sex))
g2 + geom_boxplot() + ylab("grade") + ggtitle("Student failures by alcohol consumption and sex")
g2 <- ggplot(alc, aes(x = high_use, y = Dalc, col = sex))
g2 + geom_boxplot() + ylab("grade") + ggtitle("Student work day alcohol consumption by alcohol consumption and sex")
g2 <- ggplot(alc, aes(x = high_use, y = absences, col = sex))
g2 + geom_boxplot() + ylab("grade") + ggtitle("Student absences by alcohol consumption and sex")
g2 <- ggplot(alc, aes(x = high_use, y = failures, col = sex))
g2 + geom_boxplot() + ylab("failures") + ggtitle("Student failures by alcohol consumption and sex")
g2 <- ggplot(alc, aes(x = high_use, y = Dalc, col = sex))
g2 + geom_boxplot() + ylab("Dalc") + ggtitle("Student work day alcohol consumption by alcohol consumption and sex")
g2 <- ggplot(alc, aes(x = high_use, y = absences, col = sex))
g2 + geom_boxplot() + ylab("absences") + ggtitle("Student absences by alcohol consumption and sex")
g2 <- ggplot(alc, aes(x = high_use, y = failures, col = sex))
g2 + geom_boxplot() + ylab("failures") + ggtitle("Student failures by alcohol consumption and sex")
g2 <- ggplot(alc, aes(x = high_use, y = failures, col = sex))
g2 + geom_boxplot() + ylab("failures") + ggtitle("Student failures by alcohol consumption and sex")
g5 <- ggplot(alc, aes(x = high_use, col = sex))
g5 + geom_bar() + ylab("failures") + ggtitle("Student failures by alcohol consumption and sex")
g5 <- ggplot(alc, aes(x = high_use, y = failures, col = sex))
g5 + geom_bar() + ylab("failures") + ggtitle("Student failures by alcohol consumption and sex")
g5 <- ggplot(alc, aes(x = high_use, col = sex))
g5 + geom_bar() + ylab("failures") + ggtitle("Student failures by alcohol consumption and sex")
m <- glm(high_use ~ failures + absences + sex + Dalc, data = alc, family = "binomial")
# print out a summary of the model
summary(m)
# print out the coefficients of the model
coef(m)
# compute odds ratios (OR)
OR <- coef(m) %>% exp
# compute confidence intervals (CI)
CI <- confint(m) %>% exp
# print out the odds ratios with their confidence intervals
cbind(OR, CI)
# find the model with glm()
m <- glm(high_use ~ failures + absences + sex + Dalc, data = alc, family = "binomial")
# print out a summary of the model
summary(m)
# print out the coefficients of the model
coef(m)
g4 <- ggplot(alc, aes(x = high_use, y = absences, col = sex))
g4 + geom_boxplot() + ylab("grade") + ggtitle("Student absences by alcohol consumption and sex")
g3 <- ggplot(alc, aes(x = high_use, y = Dalc, col = sex))
g3 + geom_boxplot() + ylab("grade") + ggtitle("Student work day alcohol consumption by alcohol consumption and sex")
g2 <- ggplot(alc, aes(x = high_use, y = failures, col = sex))
g2 + geom_boxplot() + ylab("grade") + ggtitle("Student failures by alcohol consumption and sex")
# fit the model
m <- glm(high_use ~ absences + Dalc, data = alc, family = "binomial")
# predict() the probability of high_use
probabilities <- predict(m, type = "response")
# add the predicted probabilities to 'alc'
alc <- mutate(alc, probability = probabilities)
# use the probabilities to make a prediction of high_use
alc <- mutate(alc, prediction = probability > 0.5)
# see the last ten original classes, predicted probabilities, and class predictions
select(alc, absences, Dalc, high_use, probability, prediction) %>% tail(10)
# tabulate the target variable versus the predictions
table(high_use = alc$high_use, prediction = probabilities > 0.5)
# initialize a plot of 'high_use' versus 'probability' in 'alc'
g <- ggplot(alc, aes(x = probability, y = high_use, col = prediction))
# define the geom as points and draw the plot
g + geom_point()
# tabulate the target variable versus the predictions
table(high_use = alc$high_use, prediction = alc$prediction) %>% prop.table() %>% addmargins()
```{r}
loss_func <- function(class, prob) {
n_wrong <- abs(class - prob) > 0.5
mean(n_wrong)
}
loss_func(class = alc$high_use, prob = alc$probability)
# define a loss function (average prediction error)
loss_func <- function(class, prob) {
n_wrong <- abs(class - prob) > 0.5
mean(n_wrong)
}
# compute the average number of wrong predictions in the (training) data
loss_func(class = alc$high_use, prob = alc$probability)
# K-fold cross-validation
library(boot)
cv <- cv.glm(data = alc, cost = loss_func, glmfit = m, K = 10)
# average number of wrong predictions in the cross validation
cv$delta[1]
# Load libraries
library(tidyr); library(dplyr); library(ggplot2); library(GGally)
# Import data
alc <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/alc.txt ", sep=",", header=TRUE)
# find the model with glm()
m <- glm(high_use ~ failures + absences + sex, data = alc, family = "binomial")
# print out a summary of the model
summary(m)
# print out the coefficients of the model
coef(m)
# compute odds ratios (OR)
OR <- coef(m) %>% exp
# compute confidence intervals (CI)
CI <- confint(m) %>% exp
# print out the odds ratios with their confidence intervals
cbind(OR, CI)
```{r}
