ggpairs(lrn14, lower = list(combo = wrap("facethist", bins = 20)))
# create a regression model with multiple explanatory variables
model1 <- lm(points ~ attitude + stra + surf, data = lrn2014)
# print out a summary of the model
summary(model1)
model1 <- lm(points ~ attitude + stra + surf, data = lrn2014)
# Regression and model validation
# ALL CODE
# Load libraries
library(GGally)
library(ggplot2)
# Import data
lrn14 <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/learning2014.txt", sep=",", header=TRUE)
# About the data
str(lrn14)
dim(lrn14)
# draw a scatter plot matrix of the variables excluding the first column, gender
pairs(lrn14[-1])
# show summaries of the variables in the data.
summary(lrn14$gender)
summary(lrn14$age)
summary(lrn14$attitude)
summary(lrn14$deep)
summary(lrn14$stra)
summary(lrn14$surf)
summary(lrn14$points)
# create an plot matrix with ggpairs()
ggpairs(lrn14, lower = list(combo = wrap("facethist", bins = 20)))
# create a regression model with multiple explanatory variables
model1 <- lm(points ~ attitude + stra + surf, data = lrn2014)
# print out a summary of the model
summary(model1)
model1 <- lm(points ~ attitude + stra + surf, data = lrn14)
summary(model1)
# create a regression model with statistically relevant variables
model2 <- lm(points ~ attitude + stra, data = lrn14)
# print out a summary of the model
summary(model2)
# create a regression model with statistically relevant variables
model2 <- lm(points ~ attitude, data = lrn14)
# print out a summary of the model
summary(model2)
summary(lrn14$gender, lrn14$age, lrn14$attitude, lrn14$deep, lrn14$stra, lrn14$surf ,lrn14$points)
summary(lrn14)
summary(model2)
par(mfrow = c(2,2))
plot(model2, which = c(1:2,5))
**Residuals vs Fitted**
The Residuals vs Fitted plot is based on the assumption that the size of error doesn't depend on explanatory variables. The plot shows whether there is a problem with this assumption. There is no pattern in the data, therefore the model adheres to the assumption.
g2 <- ggplot(alc, aes(x = high_use, y = failures))
# Load libraries
library(tidyr); library(dplyr); library(ggplot2); library(GGally)
# Import data
alc <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/alc.txt ", sep=",", header=TRUE)
g2 <- ggplot(alc, aes(x = high_use, y = failures))
g2 + geom_boxplot() + ylab("failures") + ggtitle("Student failures by alcohol consumption and sex")
p1 <- ggplot(alc, aes(x = high_use, y = failures, col = gender))
p2 <- p1 + geom_point()
p2
p1 <- ggplot(alc, aes(x = high_use, y = failures, col = sex))
p2 <- p1 + geom_point()
p2
p3 <- p2 + geom_smooth(method = "lm")
p3
100-94
100-9
library(MASS); library(tidyr); library(dplyr); library(ggplot2); library(GGally)
data("Boston")
str(data)
dim(data)
str(Boston)
dim(Boston)
summary(Boston)
```{r}
pairs(Boston)
pairs(Boston)
cor_matrix<-cor(Boston)
print(cor_matrix)
corrplot(cor_matrix, method="circle", type = "upper", cl.pos = "b", tl.pos = "d", tl.cex = 0.6) %>% round(digits = 2)
library(tidyr); library(dplyr); library(ggplot2); library(GGally)
pairs(Boston)
cor_matrix<-cor(Boston)
print(cor_matrix)
corrplot(cor_matrix, method="circle", type = "upper", cl.pos = "b", tl.pos = "d", tl.cex = 0.6) %>% round(digits = 2)
install.packages("corrplot")
pairs(Boston)
cor_matrix<-cor(Boston)
print(cor_matrix)
corrplot(cor_matrix, method="circle", type = "upper", cl.pos = "b", tl.pos = "d", tl.cex = 0.6) %>% round(digits = 2)
library(MASS); library(tidyr); library(dplyr); library(ggplot2); library(GGally)
library(corrplot)
pairs(Boston)
cor_matrix<-cor(Boston)
print(cor_matrix)
corrplot(cor_matrix, method="circle", type = "upper", cl.pos = "b", tl.pos = "d", tl.cex = 0.6) %>% round(digits = 2)
boston_scaled <- scale(Boston)
summary(boston_scaled)
class(boston_scaled)
boston_scaled <- as.data.frame(boston_scaled)
summary(boston_scaled$crim)
summary(boston_scaled$crim)
bins <- quantile(boston_scaled$crim)
bins
crime <- cut(boston_scaled$crim, breaks = bins, include.lowest = TRUE, label = c("low", "med_low", "med_high", "high"))
table(crime)
boston_scaled <- dplyr::select(boston_scaled, -crim)
boston_scaled <- data.frame(boston_scaled, crime)
n <- nrow(boston_scaled)
ind <- sample(n,  size = n * 0.8)
train <- boston_scaled[ind,]
test <- boston_scaled[-ind,]
correct_classes <- test$crime
test <- dplyr::select(test, -crime)
lda.fit <- lda(crime ~ ., data = train)
lda.fit
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
classes <- as.numeric(train$crime)
plot(lda.fit, col = classes, pch = classes, dimen = 2)
lda.arrows(lda.fit, myscale = 1)
# Load libraries
library(MASS); library(tidyr); library(dplyr); library(ggplot2); library(GGally); library(corrplot)
# Load data
data("Boston")
str(Boston)
summary(Boston)
pairs(Boston)
cor_matrix<-cor(Boston)
print(cor_matrix)
corrplot(cor_matrix, method="circle", type = "upper", cl.pos = "b", tl.pos = "d", tl.cex = 0.6) %>% round(digits = 2)
boston_scaled <- scale(Boston)
summary(boston_scaled)
class(boston_scaled)
boston_scaled <- as.data.frame(boston_scaled)
summary(boston_scaled$crim)
bins <- quantile(boston_scaled$crim)
bins
crime <- cut(boston_scaled$crim, breaks = bins, include.lowest = TRUE, label = c("low", "med_low", "med_high", "high"))
table(crime)
boston_scaled <- dplyr::select(boston_scaled, -crim)
boston_scaled <- data.frame(boston_scaled, crime)
n <- nrow(boston_scaled)
ind <- sample(n,  size = n * 0.8)
train <- boston_scaled[ind,]
test <- boston_scaled[-ind,]
lda.fit <- lda(crime ~ ., data = train)
lda.fit
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
lda.fit <- lda(crime ~ ., data = train)
lda.fit
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
classes <- as.numeric(train$crime)
plot(lda.fit, col = classes, pch = classes, dimen = 2)
lda.arrows(lda.fit, myscale = 1)
correct_classes <- test$crime
test <- dplyr::select(test, -crime)
summary(boston_scaled$crim)
bins <- quantile(boston_scaled$crim)
bins
crime <- cut(boston_scaled$crim, breaks = bins, include.lowest = TRUE, label = c("low", "med_low", "med_high", "high"))
table(crime)
boston_scaled <- dplyr::select(boston_scaled, -crim)
boston_scaled <- data.frame(boston_scaled, crime)
n <- nrow(boston_scaled)
ind <- sample(n,  size = n * 0.8)
train <- boston_scaled[ind,]
test <- boston_scaled[-ind,]
correct_classes <- test$crime
test <- dplyr::select(test, -crime)
lda.fit <- lda(crime ~ ., data = train)
lda.fit
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
classes <- as.numeric(train$crime)
plot(lda.fit, col = classes, pch = classes, dimen = 2)
lda.arrows(lda.fit, myscale = 1)
lda.fit <- lda(crime ~ ., data = train)
lda.fit
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
classes <- as.numeric(train$crime)
plot(lda.fit, col = classes, pch = classes, dimen = 2)
lda.arrows(lda.fit, myscale = 1)
library(MASS); library(tidyr); library(dplyr); library(ggplot2); library(GGally); library(corrplot)
# Load data
data("Boston")
str(Boston)
summary(Boston)
str(Boston)
summary(Boston)
# Load libraries
library(MASS); library(tidyr); library(dplyr); library(ggplot2); library(GGally); library(corrplot)
# Load data
data("Boston")
str(Boston)
summary(Boston)
pairs(Boston)
cor_matrix<-cor(Boston)
print(cor_matrix)
corrplot(cor_matrix, method="circle", type = "upper", cl.pos = "b", tl.pos = "d", tl.cex = 0.6) %>% round(digits = 2)
boston_scaled <- scale(Boston)
summary(boston_scaled)
class(boston_scaled)
boston_scaled <- as.data.frame(boston_scaled)
summary(boston_scaled$crim)
bins <- quantile(boston_scaled$crim)
bins
crime <- cut(boston_scaled$crim, breaks = bins, include.lowest = TRUE, label = c("low", "med_low", "med_high", "high"))
table(crime)
boston_scaled <- dplyr::select(boston_scaled, -crim)
boston_scaled <- data.frame(boston_scaled, crime)
n <- nrow(boston_scaled)
ind <- sample(n,  size = n * 0.8)
train <- boston_scaled[ind,]
test <- boston_scaled[-ind,]
correct_classes <- test$crime
test <- dplyr::select(test, -crime)
# Load libraries
library(MASS); library(tidyr); library(dplyr); library(ggplot2); library(GGally); library(corrplot)
# Load data
data("Boston")
str(Boston)
summary(Boston)
pairs(Boston)
cor_matrix<-cor(Boston)
print(cor_matrix)
corrplot(cor_matrix, method="circle", type = "upper", cl.pos = "b", tl.pos = "d", tl.cex = 0.6) %>% round(digits = 2)
boston_scaled <- scale(Boston)
summary(boston_scaled)
class(boston_scaled)
boston_scaled <- as.data.frame(boston_scaled)
summary(boston_scaled$crim)
bins <- quantile(boston_scaled$crim)
bins
crime <- cut(boston_scaled$crim, breaks = bins, include.lowest = TRUE, label = c("low", "med_low", "med_high", "high"))
table(crime)
boston_scaled <- dplyr::select(boston_scaled, -crim)
boston_scaled <- data.frame(boston_scaled, crime)
n <- nrow(boston_scaled)
ind <- sample(n,  size = n * 0.8)
train <- boston_scaled[ind,]
test <- boston_scaled[-ind,]
lda.fit <- lda(crime ~ ., data = train)
lda.fit
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
classes <- as.numeric(train$crime)
plot(lda.fit, col = classes, pch = classes, dimen = 2)
lda.arrows(lda.fit, myscale = 1)
correct_classes <- test$crime
test <- dplyr::select(test, -crime)
correct_classes <- test$crime
test <- dplyr::select(test, -crime)
# Load libraries
library(MASS); library(tidyr); library(dplyr); library(ggplot2); library(GGally); library(corrplot)
# Load data
data("Boston")
str(Boston)
summary(Boston)
pairs(Boston)
cor_matrix<-cor(Boston)
print(cor_matrix)
corrplot(cor_matrix, method="circle", type = "upper", cl.pos = "b", tl.pos = "d", tl.cex = 0.6) %>% round(digits = 2)
boston_scaled <- scale(Boston)
summary(boston_scaled)
class(boston_scaled)
boston_scaled <- as.data.frame(boston_scaled)
summary(boston_scaled$crim)
bins <- quantile(boston_scaled$crim)
bins
crime <- cut(boston_scaled$crim, breaks = bins, include.lowest = TRUE, label = c("low", "med_low", "med_high", "high"))
table(crime)
boston_scaled <- dplyr::select(boston_scaled, -crim)
boston_scaled <- data.frame(boston_scaled, crime)
n <- nrow(boston_scaled)
ind <- sample(n,  size = n * 0.8)
train <- boston_scaled[ind,]
test <- boston_scaled[-ind,]
lda.fit <- lda(crime ~ ., data = train)
lda.fit
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
classes <- as.numeric(train$crime)
plot(lda.fit, col = classes, pch = classes, dimen = 2)
lda.arrows(lda.fit, myscale = 1)
correct_classes <- test$crime
test <- dplyr::select(test, -crime)
lda.pred <- predict(lda.fit, newdata = test)
table(correct = correct_classes, predicted = lda.pred$class)
library(MASS)
data('Boston')
boston_scaled <- scale(Boston)
summary(boston_scaled)
class(boston_scaled)
boston_scaled <- as.data.frame(boston_scaled)
dist_eu <- dist(Boston)
summary(dist_eu)
km <-kmeans(Boston, centers = 3)
pairs(Boston, col = km$cluster)
```{r}
km <-kmeans(Boston, centers = 3)
ggpairs(Boston, col = km$cluster)
km <-kmeans(Boston, centers = 3)
pairs(Boston, col = km$cluster)
# MASS, ggplot2 and Boston dataset are available
set.seed(123)
# determine the number of clusters
k_max <- 10
# calculate the total within sum of squares
twcss <- sapply(1:k_max, function(k){kmeans(Boston, k)$tot.withinss})
# visualize the results
qplot(x = 1:k_max, y = twcss, geom = 'line')
set.seed(123)
k_max <- 10
twcss <- sapply(1:k_max, function(k){kmeans(Boston, k)$tot.withinss})
qplot(x = 1:k_max, y = twcss, geom = 'line')
km <-kmeans(Boston, centers = 2)
pairs(Boston, col = km$cluster)
km <-kmeans(Boston, centers = 2)
ggpairs(Boston, col = km$cluster)
library(dplyr)
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
dim(hd)
str(hd)
summary(hd)
dim(gii)
str(gii)
summary(gii)
colnames(hd)
colnames(hd)
colnames(hd)[1] <- "Rank"
colnames(hd)[3] <- "HDI"
colnames(hd)[4] <- "Life"
colnames(hd)[5] <- "Expt.Ed"
colnames(hd)[6] <- "Mean.Ed"
colnames(hd)[7] <- "GNI"
colnames(hd)[8] <- "GNI.Rank.Minus.HDI.Rank"
colnames(hd)
colnames(gii)
colnames(hd)[1] <- "HDI.Rank"
colnames(gii)
colnames(gii)[1] <- "GII.Rank"
colnames(gii)[3] <- "GII"
colnames(gii)[4] <- "Mat.Mort"
colnames(gii)[5] <- "Adol.Birth"
colnames(gii)[6] <- "Parl"
colnames(gii)[7] <- "Sec.Ed.Fem"
colnames(gii)[8] <- "Sec.Ed.Mal"
colnames(gii)[9] <- "Labour.Fem"
colnames(gii)[9] <- "Labour.Mal"
colnames(gii)
colnames(hd)
colnames(hd)[8] <- "GNI.Min.HDI"
colnames(hd)
colnames(hd)
colnames(hd)[1] <- "hdirank"
colnames(hd)[3] <- "hdi"
colnames(hd)[4] <- "life"
colnames(hd)[5] <- "expted"
colnames(hd)[6] <- "meaned"
colnames(hd)[7] <- "gni"
colnames(hd)[8] <- "gniminhdi"
colnames(gii)
colnames(gii)[1] <- "giirank"
colnames(gii)[3] <- "gii"
colnames(gii)[4] <- "matmort"
colnames(gii)[5] <- "adbirth"
colnames(gii)[6] <- "parl"
colnames(gii)[7] <- "ed2f"
colnames(gii)[8] <- "ed2m"
colnames(gii)[9] <- "labfem"
colnames(gii)[9] <- "labmal"
colnames(hd)
colnames(hd)[2] <- "country"
colnames(hd)
colnames(gii)[2] <- "country"
colnames(gii)
colnames(gii)[10] <- "labmal"
colnames(gii)
secondary_ed <- c("ed2fem" / "ed2mal")
secondary_ed <- c("ed2fem", "ed2mal")
2ed_columns <- select(hd, one_of(secondary_ed))
hd$ed <- rowMeans(2ed_columns)
2ed_columns <- select(hd, one_of(secondary_ed))
hd$ed <- rowMeans(2ed_columns)
secondary_ed <- c("ed2fem", "ed2mal")
ed_columns <- select(hd, one_of(secondary_ed))
secondary_ed <- c("ed2f", "ed2m")
ed_columns <- select(hd, one_of(secondary_ed))
colnames(gii)[1] <- "giirank"
colnames(gii)[2] <- "country"
colnames(gii)[3] <- "gii"
colnames(gii)[4] <- "matmort"
colnames(gii)[5] <- "adbirth"
colnames(gii)[6] <- "parl"
colnames(gii)[7] <- "ed2f"
colnames(gii)[8] <- "ed2m"
colnames(gii)[9] <- "labfem"
colnames(gii)[10] <- "labmal"
secondary_ed <- c("ed2f", "ed2m")
ed_columns <- select(gii, one_of(secondary_ed))
hd$ed <- rowMeans(ed_columns)
hd$ed <- rowRatio(ed_columns)
secondary_ed <- c("ed2f", "ed2m")
gii %>% group_by(secondary_ed) %>% mutate(ratio = value/sum(value))
secondary_ed <- c("ed2f", "ed2m")
gii %>% group_by(secondary_ed) %>% mutate(ratio = value/sum(value))
ed_columns <- select(gii, one_of(secondary_ed))
mutate(ratio = value/sum(value))
mutate(ratio = ed2f/sum(ed2m))
secondary_ed <- c("ed2f", "ed2m")
ed_columns <- select(gii, one_of(secondary_ed))
mutate(ratio = ed2f/sum(ed2m))
ed_columns <- select(gii, one_of(secondary_ed)) %>% mutate(ratio = ed2f/sum(ed2m))
summary(ed_columns)
ed_columns <- select(gii, one_of(secondary_ed)) %>% mutate(ratio = ed2f/ed2m)
summary(ed_columns)
labour_part <- c("labfem", "labmal")
lab_columns <- select(gii, one_of(labour_part)) %>% mutate(ratio = labfem/labmal)
summary(lab_columns)
join_by <- c("country")
hd_gii <- inner_join(hd, gii, by = join_by, suffix = c(".hd", ".gii"))
human <- inner_join(hd, gii, by = join_by, suffix = c(".hd", ".gii"))
colnames(human)
summary(human)
dim(human)
dim(hd)
dim(gii)
colnames(human)
colnames(hd)[2] <- "hcountry"
colnames(gii)[2] <- "gcountry"
join_by <- c("country")
human <- inner_join(hd, gii, by = join_by, suffix = c(".hd", ".gii"))
colnames(hd)
colnames(hd)[1] <- "hdirank"
colnames(hd)[2] <- "country"
colnames(hd)[3] <- "hdi"
colnames(hd)[4] <- "life"
colnames(hd)[5] <- "expted"
colnames(hd)[6] <- "meaned"
colnames(hd)[7] <- "gni"
colnames(hd)[8] <- "gniminhdi"
colnames(gii)
colnames(gii)[1] <- "giirank"
colnames(gii)[2] <- "country"
colnames(gii)[3] <- "gii"
colnames(gii)[4] <- "matmort"
colnames(gii)[5] <- "adbirth"
colnames(gii)[6] <- "parl"
colnames(gii)[7] <- "ed2f"
colnames(gii)[8] <- "ed2m"
colnames(gii)[9] <- "labfem"
colnames(gii)[10] <- "labmal"
join_by <- c("country")
human <- inner_join(hd, gii, by = join_by, suffix = c(".hd", ".gii"))
dim(human)
colnames(human)
setwd("~/GitHub/IODS-project/data")
write.csv(human, file ="human.csv")
read.csv("human.csv")
dim(human)
setwd("~/GitHub/IODS-project")
set.seed(123)
k_max <- 10
twcss <- sapply(1:k_max, function(k){kmeans(Boston, k)$tot.withinss})
qplot(x = 1:k_max, y = twcss, geom = 'line')
km <-kmeans(Boston, centers = 2)
pairs(Boston, col = km$cluster)
